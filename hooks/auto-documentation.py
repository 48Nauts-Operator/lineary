#!/usr/bin/env python3
"""
Auto-Documentation Generator for Betty
Creates feature documentation when significant changes are made
"""

import json
import sys
import os
from pathlib import Path
from datetime import datetime

class AutoDocumentationHook:
    def __init__(self):
        self.docs_dir = Path("/home/jarvis/projects/Betty/docs/auto-generated")
        self.docs_dir.mkdir(parents=True, exist_ok=True)
        self.session_file = self.docs_dir / ".session_state.json"
        self.load_session_state()
    
    def load_session_state(self):
        """Load or initialize session state"""
        if self.session_file.exists():
            with open(self.session_file, 'r') as f:
                self.state = json.load(f)
        else:
            self.state = {
                "files_modified": [],
                "features_added": [],
                "tests_created": [],
                "last_doc_generated": None
            }
    
    def save_session_state(self):
        """Save session state"""
        with open(self.session_file, 'w') as f:
            json.dump(self.state, f, indent=2)
    
    def should_generate_doc(self):
        """Determine if documentation should be generated"""
        # Generate if 3+ files modified or significant feature added
        return (len(self.state["files_modified"]) >= 3 or 
                len(self.state["features_added"]) > 0 or
                len(self.state["tests_created"]) >= 2)
    
    def generate_documentation(self):
        """Generate feature documentation"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        doc_file = self.docs_dir / f"feature_{timestamp}.md"
        
        content = f"""# Auto-Generated Feature Documentation

**Generated**: {datetime.now().isoformat()}
**Session ID**: {os.getenv('CLAUDE_SESSION_ID', 'unknown')}

## Changes Made

### Files Modified ({len(self.state['files_modified'])})
"""
        for file in self.state["files_modified"]:
            content += f"- `{file}`\n"
        
        if self.state["features_added"]:
            content += f"\n### Features Added ({len(self.state['features_added'])})\n"
            for feature in self.state["features_added"]:
                content += f"- {feature}\n"
        
        if self.state["tests_created"]:
            content += f"\n### Tests Created ({len(self.state['tests_created'])})\n"
            for test in self.state["tests_created"]:
                content += f"- `{test}`\n"
        
        content += "\n---\n*Auto-generated by Betty Documentation Hook*\n"
        
        doc_file.write_text(content)
        return doc_file
    
    def process_event(self, data):
        """Process Claude Code event"""
        tool_name = data.get("tool_name", "")
        
        if tool_name == "PostToolUse":
            tool_input = data.get("tool_input", {})
            actual_tool = tool_input.get("tool_name", "")
            
            if actual_tool in ["Write", "Edit", "MultiEdit"]:
                file_path = tool_input.get("tool_input", {}).get("file_path", "")
                if file_path and file_path not in self.state["files_modified"]:
                    self.state["files_modified"].append(file_path)
                    
                    # Check if it's a test file
                    if "test" in file_path.lower():
                        self.state["tests_created"].append(file_path)
                    
                    # Check if it's a new feature
                    if any(keyword in file_path.lower() for keyword in ["api", "feature", "component"]):
                        feature_name = Path(file_path).stem.replace("_", " ").title()
                        self.state["features_added"].append(feature_name)
            
            self.save_session_state()
            
            # Generate documentation if threshold met
            if self.should_generate_doc():
                doc_file = self.generate_documentation()
                return {
                    "success": True,
                    "action": "documentation_generated",
                    "file": str(doc_file)
                }
        
        elif tool_name == "Stop":
            # Generate final documentation on session end
            if self.state["files_modified"]:
                doc_file = self.generate_documentation()
                return {
                    "success": True,
                    "action": "final_documentation",
                    "file": str(doc_file)
                }
        
        return {"success": True, "action": "continue"}

def main():
    if not sys.stdin.isatty():
        input_data = sys.stdin.read()
        try:
            data = json.loads(input_data)
            hook = AutoDocumentationHook()
            result = hook.process_event(data)
            print(json.dumps(result))
        except Exception as e:
            print(json.dumps({
                "success": False,
                "error": str(e)
            }))
    else:
        print(json.dumps({"success": True, "action": "continue"}))

if __name__ == "__main__":
    main()
